suite: Ingress host tests
templates:
- "ingress.yaml"
tests:

  - it: "1: Should set nginx-private and cloudflare-dns01-issuer when private host is set."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        exposure: internalOK
        host: "example.test.ok.dk"
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx-private"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "cloudflare-dns01-issuer"

  - it: "2: Should set nginx-public and cloudflare-dns01-issuer when public host is set."
    set:
      service.enable: true 
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        exposure: public
        host: "example.test.ok.dk"
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx-public"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "cloudflare-dns01-issuer"

  - it: "3: Should set nginx-private and cloudflare-dns01-issuer when implicit private host is set."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        host: "example.test.ok.dk"
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx-private"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "cloudflare-dns01-issuer"

  - it: "4: Explicit private host with nginx-private and cloudflare-dns01-issuer expected"
    set:  
      service.enable: true 
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        exposure: internalOK
        host: "example.private.ok.dk"
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx-private"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "cloudflare-dns01-issuer" 

  - it: "5: Should set nginx and nginx-http01 when explicit public host in cloud is set."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        exposure: public
        host: "example.test.okcloud.dk"
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "nginx-http01"

  - it: "6: Should set nginx and nginx-http01 when implicit public host in cloud is set."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        host: "example.test.okcloud.dk"
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "nginx-http01"

  - it: "7: Should set nginx and nginx-http01 when cluster is set to cloud, this allows our ok.dk domain in cloud."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        host: "example.test.ok.dk"
        clusterOverwrite: true
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "nginx"
      - equal:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
          value: "nginx-http01"

  - it: "8: Should not allow private service in cloud. We expect a failed template."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        exposure: internalOK
        host: "example.test.okcloud.dk"
    asserts:
      - failedTemplate:
        errorMessage: "Services hosted in cloud are public only."

  - it: "9: Should not allow a domain in host we do not know."
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress.enable: true
      ingress:
        exposure: internalOK
        host: "example.blahblah.com"
    asserts:
      - failedTemplate:
        errorMessage: "Parent domain not recognized."


  - it: "10: Should work with custom ingress"
    set:
      service.enable: true
      deployment.container.containerPort: 8080
      ingress:
        enable: true
        host: "example.ok.dk"
        ingressClassName: haproxy
      
    asserts:
      - equal:
          path: "spec.ingressClassName"
          value: "haproxy"

      - notContains:
          path: "metadata.annotations['nginx.ingress.kubernetes.io/from-to-www-redirect']"

      - notContains:
          path: "metadata.annotations['nginx.ingress.kubernetes.io/ssl-redirect']"

      - notContains:
          path: "metadata.annotations['cert-manager.io/cluster-issuer']"
