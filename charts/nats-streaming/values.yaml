##################################
#                                #
#  NATS Streaming Configuration  #
#                                #
##################################
kubernetesNamespace: 
stan:
  image: nats-streaming:0.25.6
  pullPolicy: IfNotPresent
  replicas: 3

  # securityContext for the stan container
  securityContext: {}


  # Cluster name, generated into a name from the
  # release name by default.
  clusterID:

  logging:
    debug: true
    trace:

  auth:
    enabled: false

    secretRef:
      secret: 
      usernameKey: 
      passwordKey:

nameOverride: ""
imagePullSecrets: []
serviceAccountName: ""

# Annotations to add to the NATS pods
# ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# Toggle whether to use setup a Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: null
# securityContext:
#   fsGroup: 1000
#   runAsUser: 1000
#   runAsNonRoot: true

# Pod Topology Spread Constraints
# ref https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
topologySpreadConstraints: []
# - maxSkew: 1
#   topologyKey: zone
#   whenUnsatisfiable: DoNotSchedule

# Resource requests and limits for primary stan container
# ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources: {}

# Readiness probe to determine when nats-streaming is ready
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /streaming/serverz
    port: monitor
  timeoutSeconds: 2

# Readiness probe to determine when nats-streaming cluster is ready.
# Overrides the readinessProbe in case present.
# NOTE: Only works with the nats-streaming alpine image.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
clusterReadinessProbe:
  enabled: false
  probe:
    exec:
      command: ["/bin/sh", "-c", "n=$(($STAN_REPLICAS-1)); for i in `seq 0 $n`; do wget -qO- $STAN_SERVICE_NAME-$i.$STAN_SERVICE_NAME:8222/streaming/serverz 2> /dev/null > /dev/null; done; if [[ $? -ne 0 ]]; then wget -qO- 127.0.0.1:8222/streaming/serverz | grep role | awk '{print $2}' | grep '\\(Candidate\\|Follower\\|Leader\\)'; else wget -qO- 127.0.0.1:8222/streaming/serverz | grep role | awk '{print $2}' | grep '\\(Follower\\|Leader\\)'; fi;"]
    initialDelaySeconds:
    periodSeconds: 10

# Liveness probe to determine when nats-streaming is alive
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  enabled: false
  probe:
    httpGet:
      path: /
      port: monitor
    timeoutSeconds: 2

###########################
#                         #
#  Storage configuration  #
#                         #
###########################
store:
  # We only support file for on-prem migration
  type: file

  #
  # Fault tolerance group
  #
  ft:
    group:

  # Configures streaming/store_limits.
  #
  # NOTE: Section in snake case since they will become
  # the same objects.
  #
  # Look at the NATS Streaming configuration for this:
  #
  # https://docs.nats.io/nats-streaming-server/configuring/cfgfile#store-limits-configuration
  #
  limits: {}

  # Enables streaming/partitioning
  #
  # https://docs.nats.io/nats-streaming-concepts/partitioning
  #
  partitioning:
    enabled: false

  #
  # Volume claim configuration. Required if the store type is `file` or if
  # cluster is enabled.
  #
  volume:
    enabled: true
    mount: /data/stan
    storageSize: 5Gi
    accessModes: ReadWriteMany
    storageClass: nfs-client

  #
  # File storage settings.
  #
  file:
    path: /data/stan/store
    # Configures streaming/file_options as is.
    #
    # NOTE: Section in snake case since they will become
    # the same objects.
    #
    # Look at the NATS Streaming configuration for this:
    #
    # https://docs.nats.io/nats-streaming-server/configuring/cfgfile#file-options-configuration
    #
    options: {}

  # In case of using file storage, sets up a 3 node cluster.
  cluster:
    enabled: true
    logPath: /data/stan/log


#######################################
#                                     #
# Prometheus Exporter configuration   #
#                                     #
#######################################
exporter:
  enabled: true
  image: natsio/prometheus-nats-exporter:latest
  pullPolicy: IfNotPresent
  securityContext: {}
  resources: {}
  # override the default args passed to the exporter
  # see https://github.com/nats-io/prometheus-nats-exporter#usage
  # make sure to pass HTTP monitoring port URL as last arg, e.g ["-connz", "http://localhost:8222/"]
  args: []
  # Prometheus operator ServiceMonitor support. Exporter has to be enabled
  serviceMonitor:
    enabled: false
    ## Specify the namespace where Prometheus Operator is running
    ##
    # namespace: monitoring
    labels: {}
    annotations: {}
    path: /metrics
    # interval:
    # scrapeTimeout:

#
#  Embedded NATS Configuration
#
#  NOTE: Should be kept in sync with the NATS Helm Chart as well.
#
#################################################################################
#                                                                               #
#  _   _    _  _____ ____    _____           _              _     _          _  #
# | \ | |  / \|_   _/ ___|  | ____|_ __ ___ | |__   ___  __| | __| | ___  __| | #
# |  \| | / _ \ | | \___ \  |  _| | '_ ` _ \| '_ \ / _ \/ _` |/ _` |/ _ \/ _` | #
# | |\  |/ ___ \| |  ___) | | |___| | | | | | |_) |  __/ (_| | (_| |  __/ (_| | #
# |_| \_/_/   \_\_| |____/  |_____|_| |_| |_|_.__/ \___|\__,_|\__,_|\___|\__,_| #
#                                                                               #
#################################################################################
nats:
  pullPolicy: IfNotPresent

  # Toggle whether to enable external access.
  # This binds a host port for clients, gateways and leafnodes.
  externalAccess: false

  # Toggle to disable client advertisements (connect_urls),
  # in case of running behind a load balancer
  # it might be required to disable advertisements.
  advertise: true

  # The number of connect attempts against discovered routes.
  connectRetries: 30

  # How many seconds should pass before sending a PING
  # to a client that has no activity.
  pingInterval:

  # Server settings.
  limits:
    maxConnections:
    maxSubscriptions:
    maxControlLine:
    maxPayload:

    writeDeadline:
    maxPending:
    maxPings:
    lameDuckDuration:

  logging:
    debug: true
    trace:
    logtime: true 
    connectErrorReports:
    reconnectErrorReports:

cluster:
  # NOTE: NATS Server service is enabled by default, but will get disabled
  # if a NATS url is defined.
  enabled: true

  # NOTE: Recommended to enable if running behind a load balancer.
  noAdvertise: false

# Leafnode connections to extend a cluster:
#
# https://docs.nats.io/nats-server/configuration/leafnodes
#
leafnodes:
  enabled: false
  noAdvertise: false
  # remotes:
  #   - url: "tls://connect.ngs.global:7422"

  #######################
  #                     #
  #  TLS Configuration  #
  #                     #
  #######################
  #
  #  # You can find more on how to setup and trouble shoot TLS connnections at:
  #
  #  # https://docs.nats.io/nats-server/configuration/securing_nats/tls
  #

  #
  # tls:
  #   secret:
  #     name: nats-client-tls
  #   ca: "ca.crt"
  #   cert: "tls.crt"
  #   key: "tls.key"

# Gateway connections to create a super cluster
#
# https://docs.nats.io/nats-server/configuration/gateways
#
gateway:
  enabled: false
  name: 'default'

  #############################
  #                           #
  #  List of remote gateways  #
  #                           #
  #############################
  # gateways:
  #   - name: other
  #     url: nats://my-gateway-url:7522

  #######################
  #                     #
  #  TLS Configuration  #
  #                     #
  #######################
  #
  #  # You can find more on how to setup and trouble shoot TLS connnections at:
  #
  #  # https://docs.nats.io/nats-server/configuration/securing_nats/tls
  #
  # tls:
  #   secret:
  #     name: nats-client-tls
  #   ca: "ca.crt"
  #   cert: "tls.crt"
  #   key: "tls.key"

# In case of both external access and advertisements being
# enabled, an initializer container will be used to gather
# the public ips.
bootconfig:
  image: natsio/nats-boot-config:0.5.4
  pullPolicy: IfNotPresent

# The NATS config reloader image to use.
reloader:
  enabled: false
  image: natsio/nats-server-config-reloader:0.6.2
  pullPolicy: IfNotPresent
  securityContext: {}

# Authentication setup
auth:
  enabled: false

  # Reference to the Operator JWT.
  # operatorjwt:
  #   configMap:
  #     name: operator-jwt
  #     key: KO.jwt

  # Public key of the System Account
  # systemAccount:

  # resolver:
  #   ############################
  #   #                          #
  #   # Memory resolver settings #
  #   #                          #
  #   ##############################
  #   # type: memory
  #   #
  #   # Use a configmap reference which will be mounted
  #   # into the container.
  #   #
  #   # configMap:
  #   #   name: nats-accounts
  #   #   key: resolver.conf
  #
  #   ##########################
  #   #                        #
  #   #  URL resolver settings #
  #   #                        #
  #   ##########################
  #   # type: URL
  #   # url: "http://nats-account-server:9090/jwt/v1/accounts/"