{{ $types := list "OnFailure" "Never" }}
{{- if not (has .Values.job.restartPolicy $types) }}
{{- fail (printf "job.restartPolicy [%s] does not have a valid type. Valid type: %s" .Values.job.restartPolicy (join ", " $types)) }}
{{- end }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "db-migration.name" $ }}
  annotations:
    {{- with .Values.job.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    argocd.argoproj.io/sync-wave: {{ (.Values.argoAnnotations).syncWave | default "-2" | quote }}
    argocd.argoproj.io/hook: {{ (.Values.argoAnnotations).syncPhase | default "Sync" }}
    argocd.argoproj.io/hook-delete-policy: {{ (.Values.argoAnnotations).hookDeletePolicy | default "HookSucceeded" }}
  labels:
    {{- include "db-migration.labels" $ | nindent 4 }}
spec:
  {{- with .Values.job }}
  ttlSecondsAfterFinished: {{ .ttlSecondsAfterFinished }}
  backoffLimit: {{ .backoffLimit | default "2" }}
  template:
    {{- if .dataDogLogs.enable }}
    metadata:
      annotations:
        {{- if.dataDogLogs.enable }}
        ad.datadoghq.com/dbup.logs: '[{"source": "{{ include "db-migration.name" $ }}", "service": "{{ include "db-migration.name" $ }}"}]'
        {{- end }}
        {{- with .podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        tags.datadoghq.com/service: "{{ include "db-migration.name" $ }}"
        tags.datadoghq.com/version: "{{ .container.tag }}"
    {{- end }}
    spec:
      {{- if .imagePullSecrets }}
      imagePullSecrets:
        {{- range $secret := .imagePullSecrets }}
        - name: {{ $secret }}
        {{- end }}
      {{- end }}
      restartPolicy: {{ .restartPolicy }}
      shareProcessNamespace: {{ .shareProcessNamespace | default "false" }}
      serviceAccountName: {{ .serviceAccountName }}
      containers:
        {{- with .container }}
        - name: dbup
          image: "{{ .image }}:{{ .tag }}"

          {{- if .command }}
          command: {{ .command | toJson }}
          {{- end }}

          {{- if .args }}
          args: {{ .args | toJson }}
          {{- end }}

          {{- if or .environment .fieldRefEnvironment }}
          env:
            {{- range $name, $value := .environment }}
            - name: {{ $name }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $value := .fieldRefEnvironment }}
            - name: {{ $name }}
              valueFrom:
                fieldRef:
                  fieldPath: {{ $value }}
            {{- end }}
          {{- end }}
          
          {{- if .envFromConfigmap }}
          envFrom:
            {{- range $cmName := .envFromConfigmap }}            
            - configMapRef:
              name: {{ $cmName }}
            {{- end }}
          {{- end }}

          {{- if or .secrets .configMaps }}
          volumeMounts:
            {{- range $secret := .secrets }}
            - name: {{ $secret }}
              mountPath: /secrets/{{ $secret }}
              readOnly: true
            {{- end }}
            {{- range $configMap := .configMaps }}
            - name: {{ $configMap.name }}
              mountPath: {{ $configMap.mountPath }}
            {{- end }}
          {{- end }}
        {{- end }}

        {{- if .cloudSQLProxy.enable }}
        {{- include "db-migration.cloudSQLProxy" $ | nindent 8 }}
        {{- end }}

      {{- if or (and .cloudSQLProxy.enable .cloudSQLProxy.secretKeyName) .container.secrets .container.configMaps }}
      volumes:
        {{- if and .cloudSQLProxy.enable .cloudSQLProxy.secretKeyName }}
        - name: {{ .cloudSQLProxy.secretKeyName }}
          secret:
            secretName: {{ .cloudSQLProxy.secretKeyName }}
        {{- end }}

        {{- with .container }}
        {{- range $secret := .secrets }}
        {{- if not (and $.Values.job.cloudSQLProxy.enable (eq $.Values.job.cloudSQLProxy.secretKeyName $secret))}}
        - name: {{ $secret }}
          secret:
            secretName: {{ $secret }}
        {{- end }}
        {{- end }}
        {{- range $configMap := .configMaps }}
        - name: {{ $configMap.name }}
          configMap:
            name: {{ $configMap.name }}
        {{- end }}
        {{- end }}
      {{- end }}
  {{- end }}
