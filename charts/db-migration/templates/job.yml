apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "db-migration.name" $ }}
  {{- if or (.Values.job.annotations) (.Values.argoAnnotations.enable) }}
  annotations:
    {{- with .Values.job.annotations }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
    {{- if .Values.argoAnnotations.enable }}
    argocd.argoproj.io/sync-wave: {{ .Values.argoAnnotations.syncWave | quote }}
    argocd.argoproj.io/hook: {{ .Values.argoAnnotations.syncPhase | quote }}
    argocd.argoproj.io/hook-delete-policy: {{ .Values.argoAnnotations.hookDeletePolicy | quote }}
    {{- end }}
  {{- end }}
  labels:
    {{- include "db-migration.labels" $ | nindent 4 }}
    {{- with .Values.job.labels }}
      {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  ttlSecondsAfterFinished: {{ .Values.job.ttlSecondsAfterFinished }}
  backoffLimit: {{ .Values.job.backoffLimit }}
  template:
    metadata:
      {{- if or .Values.job.podAnnotations .Values.dataDogLogs.enable }}
      annotations:
        {{- if.Values.dataDogLogs.enable }}
        ad.datadoghq.com/{{ .Release.Name }}-dbup.logs: '[{"source": "{{ .Release.Name }}-dbup"}]'
        ad.datadoghq.com/{{ .Release.Name }}-dbup.tags: '{"service": "{{ .Release.Name }}-dbup"}'
        {{- end }}
        {{- with .Values.job.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}

      {{- if or .Values.job.podLabels .Values.dataDogLogs.enable }}
      labels:
        {{- if.Values.dataDogLogs.enable }}
        tags.datadoghq.com/service: {{ .Release.Name }}-dbup
        tags.datadoghq.com/version: {{ .Values.job.container.tag }}
        {{- end }}
        {{- with .Values.job.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
    spec:
      {{- if .Values.job.imagePullSecrets }}
      imagePullSecrets:
        {{- .Values.job.imagePullSecrets | toYaml | nindent 8 }}
      {{- end }}
      restartPolicy: {{ .Values.job.restartPolicy }}
      shareProcessNamespace: {{ .Values.job.shareProcessNamespace }}
      containers:
        - name: {{ .Release.Name }}-dbup
          image: "{{ .Values.job.container.image }}:{{ .Values.job.container.tag }}"
          {{- with .Values.job.environment }}
          env:
          {{- range $name, $value := . }}
          - name: {{ $name }}
            value: {{ $value | quote }}
          {{- end }}
          {{- end }}
          {{- with .Values.job.secrets }}
          volumeMounts:
          {{- range $secret := . }}
          - name: {{ $secret }}
            mountPath: /secrets/{{ $secret }}
            readOnly: true
          {{- end }}
          {{- end }}

        {{- if .Values.job.cloudSQLProxy.enable }}
        - name: cloud-sql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:{{ .Values.job.cloudSQLProxy.imageTag }}
          command:
            - "/cloud_sql_proxy"
            - "-instances={{ .Values.job.cloudSQLProxy.projectId }}:{{ .Values.job.cloudSQLProxy.region }}:{{ .Values.job.cloudSQLProxy.instanceName }}=tcp:5432"
            - "-credential_file=/secrets/{{ .Values.job.cloudSQLProxy.secretKeyName }}/key.json"
            - "-enable_iam_login"
          securityContext:
            runAsNonRoot: true
          volumeMounts:
            - name: {{ .Values.job.cloudSQLProxy.secretKeyName }}
              mountPath: /secrets/{{ .Values.job.cloudSQLProxy.secretKeyName }}
              readOnly: true
        {{ end }}

      {{- if or (.Values.job.cloudSQLProxy.enable) (.Values.job.secrets) }}
      volumes:
        {{- if .Values.job.cloudSQLProxy.enable }}
        - name: {{ .Values.job.cloudSQLProxy.secretKeyName }}
          secret:
            secretName: {{ .Values.job.cloudSQLProxy.secretKeyName }}
        {{- end }}

        {{- range $secret := .Values.job.secrets }}
        {{- if not (and $.Values.job.cloudSQLProxy.enable (eq $.Values.job.cloudSQLProxy.secretKeyName $secret))}}
        - name: {{ $secret }}
          secret:
            secretName: {{ $secret }}
        {{- end }}
        {{- end }}
      {{- end }}
